#!/usr/bin/env sh
# set -eu # -o pipefail # Debian dash does not support -o pipefail

# This script creates the .env file.

MAIN_VAULT="Developer"
VAULT="opencaching"

if [ ! -f "settings.gradle.kts" ]; then
	# Do not depend on root directory name, because it may change on CI. For
	# example Cirrus CI sets it as "working-dir".
	echo "Must be run from the project root, but settings.gradle.kts does not exist in current directory $PWD"
	ls -lah
	exit 1
fi

if ! command -v op >/dev/null 2>&1; then
	echo "op command (1Password) CLI is not installed"
	exit 1
fi

if ! command -v jq >/dev/null 2>&1; then
	echo "jq is not installed"
	exit 1
fi

true >.env # Clear file

_export() {
	name="${1:-}"
	value="${2:-}"

	echo "$name"
	echo "$name=$value" >>.env
}

_export APP_BUNDLE_ID "tech.pacia.opencaching"
_export APP_PACKAGE_NAME "tech.pacia.opencaching"

google_maps_api_key() {
	maps_api_key="$(op read "op://opencaching/Google Maps API key/password")"

	keypath="$PWD/composeApp/src/androidMain/res/values/google_maps_api_key.xml"
	cat <<EOF >"$keypath"
<?xml version="1.0" encoding="utf-8"?>
<resources>
  <string name="google_maps_key" templateMergeStrategy="preserve" translatable="false">$maps_api_key</string>
</resources>
EOF

	echo "$keypath"
}

android_keystore() {
	keystore_properties="$PWD/keystore.properties"
	keystore="$PWD/keystore.jks"

	op document get \
		--force \
		--vault "$MAIN_VAULT" \
		--out-file "$keystore" \
		"Android keystore" >/dev/null

	cat <<EOF >"$keystore_properties"
storeFile=$keystore
storePassword=$(op read "op://$MAIN_VAULT/Android Keystore/Keystore password")
keyAlias=BaftekKey2
keyPassword=$(op read "op://$MAIN_VAULT/Android Keystore/Password for key BaftekKey2")
EOF

	echo "$keystore_properties"
}

google_service_accounts() {
	GOOGLE_PLAY_JSON_KEY_PATH="$PWD/google_play_android_developer_sa_key.json"
	op document get \
		--force \
		--vault "$MAIN_VAULT" \
		--out-file "$GOOGLE_PLAY_JSON_KEY_PATH" \
		"Google Play Android Developer service account key"
	_export GOOGLE_PLAY_JSON_KEY_PATH "$GOOGLE_PLAY_JSON_KEY_PATH"
}

fastlane_match() {
	GITHUB_USERNAME="op://$VAULT/GitHub/username"
	_export GITHUB_USERNAME "$GITHUB_USERNAME"

	GITHUB_PAT="op://$VAULT/GitHub/PAT"
	_export GITHUB_PAT "$GITHUB_PAT"

	MATCH_PASSWORD="op://$MAIN_VAULT/Fastlane Match certificates/password"
	_export MATCH_PASSWORD "$MATCH_PASSWORD"
}

app_store_connect() {
	APP_STORE_CONNECT="App Store Connect API key"

	APP_STORE_CONNECT_ISSUER_ID="op://$MAIN_VAULT/$APP_STORE_CONNECT/Issuer ID"
	_export APP_STORE_CONNECT_ISSUER_ID "$APP_STORE_CONNECT_ISSUER_ID"

	APP_STORE_CONNECT_KEY_ID="op://$MAIN_VAULT/$APP_STORE_CONNECT/Key ID"
	_export APP_STORE_CONNECT_KEY_ID "$APP_STORE_CONNECT_KEY_ID"

	APP_STORE_CONNECT_P8_KEY_PATH="$PWD/app_store_connect_api_key.p8"
	op document get \
		--force \
		--vault "$MAIN_VAULT" \
		--out-file "$APP_STORE_CONNECT_P8_KEY_PATH" \
		"$APP_STORE_CONNECT"
	_export APP_STORE_CONNECT_P8_KEY_PATH "$APP_STORE_CONNECT_P8_KEY_PATH"
}

okapi() {
	CONSUMER_KEY="op://$VAULT/Opencaching.pl/consumer key"
	CONSUMER_SECRET="op://$VAULT/Opencaching.pl/consumer secret"

	echo CONSUMER_KEY
	echo CONSUMER_SECRET

	cat <<EOF >>local.properties
okapi.consumerKey=$(op read "$CONSUMER_KEY")
okapi.consumerSecret=$(op read "$CONSUMER_SECRET")
EOF
}

google_maps_api_key
android_keystore
google_service_accounts
fastlane_match
app_store_connect
okapi
